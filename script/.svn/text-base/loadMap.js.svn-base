var map, basicLayer, highlightLayer, editableLayer;
var infoControls, modControls, infoIdControls;
var activeLayer = "";

var propertyAccordion =
{
    header: "> div > h3",
    collapsible: true,
    autoHeight: false
};

function getListLayers() {
	
	var gmlOptions = {
		    featureType: "point",
		    featureNS: serverURI
		};
	var gmlOptionsIn = OpenLayers.Util.extend(
	    OpenLayers.Util.extend({}, gmlOptions)
	);
	
//    $.ajax ({
//        url: serverURI,
//        dataType: "xml",
//        data: {
//          'SERVICE': 'WMS',
//          'VERSION': '1.1.1',
//          'REQUEST': 'GetCapabilities'
//        },
//        method: 'GET',
//        scope: this,
//        success: function (response) {
//        	createListLayerAccordion(response);
//        }
//    });
	
	OpenLayers.ProxyHost = "/cgi-bin/proxy.cgi?url=";
	
	OpenLayers.Request.GET({
        url: serverURI,
        params: {
            SERVICE: "WMS",
            //VERSION: "1.0.0",
            REQUEST: "GetCapabilities"
        },
        success: function(request) {
            //alert('get capab, ok');
        	var doc = request.responseXML;
            if (!doc || !doc.documentElement) {
                doc = request.responseText;
            }
            createListLayerAccordion(doc);
//            var capabilities = format.read(doc);
//            var layer = format.createLayer(capabilities, {
//                layer: "medford:buildings",
//                matrixSet: "EPSG:900913",
//                format: "image/png",
//                opacity: 0.7,
//                isBaseLayer: false
//            });
//            map.addLayer(layer);
        },
        failure: function() {
            alert("Trouble getting capabilities doc");
            OpenLayers.Console.error.apply(OpenLayers.Console, arguments);
        }
    });
	
	
	
}

function createListLayerAccordion(data) {
	var layersContainer = $("<div>").attr("id", 'layersContainer');

    $('#wb-LayerList').append(
		$("<div>").attr("id", 'projectLayer').attr("class", "project").append(
			$("<h3>").append(
				$("<a>").attr("href", "#").html($(data).find('Layer')[0].firstElementChild.textContent)
			),
			layersContainer
		)
	);
	
	for(var i=1; i < $(data).find('Layer').length; i++) {
		// Get layer for combo filter 
		$('select#wb-layerCombo').append($('<option />').attr('value', $(data).find('Layer')[i].firstElementChild.textContent)
				.text($(data).find('Layer')[i].firstElementChild.textContent)
		);
		layersContainer.append(
			$("<div>").attr('class', 'containerLayer').append(
				$("<div>").attr('class', 'layerCheckBox').append(
					$("<input>").attr('id', $(data).find('Layer')[i].firstElementChild.textContent).attr('type', 'checkbox').attr('checked', 'checked').attr('name', 'layerShowed')
				),
				$("<div>").attr('id', 'div|'+$(data).find('Layer')[i].firstElementChild.textContent).html($(data).find('Layer')[i].firstElementChild.textContent).attr('class', 'layerShowedText')		
			)			
		);
	}
	
	listLayer = getListVisibleLayer();
	viewMapLayer(listLayer);
	
	$('#wg-LayerListDiv').toggle('slide', {}, 400);	
	$('#wb-LayerList').accordion(propertyAccordion);
	
	$('#wg-layerLegendDiv').toggle('slide', {}, 400);
	
	$('.layerCheckBox input[type=checkbox]').click(function() {
		listLayer = getListVisibleLayer();
		var listLayerToView = getStringLayerToShow(listLayer);
		basicLayer.mergeNewParams({"layers": listLayerToView.reverse()});
	});
	
	$('.containerLayer').click(function() {
		// Selected layer as active layer
		activeLayer = setActiveLayer($(this).find('.layerShowedText').attr('id').split("|")[1]);
		// Remove selected items
		$('.containerLayer').removeClass('bgGrayRegular');
		$(this).removeClass('bgGray');
		// Select layer
		$(this).addClass('bgGrayRegular');
		// Disable function buttons 
		$('#toolbarMap').find('button').removeClass('ui-state-pressed');
		activateDeactivateControl();
		// Disable id info control
		map.removeControl(infoIdControls);
		// Enable info id filter control on active layer
		createInfoFilterControl(activeLayer);
		
	}).mouseover(function(){
		$(this).addClass('bgGray');
	}).mouseleave(function(){
		$(this).removeClass('bgGray');
	});
}

function viewMapLayer(listLayer) {
	
	var mapOptions = {
			//projection: "EPSG:"+epsgcode, units: unit,
			projection: "EPSG:900913", units: unit,
			//maxExtent: new OpenLayers.Bounds(1399790.32058156,4997019.0110534,1406762.76881822,5000842.5690516),
			maxScale: maxScale,
			minScale: minScale,
	        controls: [
	                   new OpenLayers.Control.Navigation({
	        			dragPanOptions: {enableKinetic: false}
	        		}),
	        	    new OpenLayers.Control.PanZoomBar(),
	        	    new OpenLayers.Control.Attribution()
	        ]			
	};
	var styleEditableLayer 		= new OpenLayers.Style();
	var styleMapEditableLayer 	= new OpenLayers.StyleMap({"default": styleEditableLayer});
	
	// Creo la mappa
    map = new OpenLayers.Map( 'wg-MapPanel', mapOptions);
    
    // Creo layer di google.
    var gphy = new OpenLayers.Layer.Google(
            "Google Physical",
            {type: google.maps.MapTypeId.TERRAIN}
    );
    var gmap = new OpenLayers.Layer.Google(
            "Google Streets", // the default
            {numZoomLevels: 20}
    );
    var ghyb = new OpenLayers.Layer.Google(
            "Google Hybrid",
            {type: google.maps.MapTypeId.HYBRID, numZoomLevels: 20}
    );
    var gsat = new OpenLayers.Layer.Google(
            "Google Satellite",
            {type: google.maps.MapTypeId.SATELLITE, numZoomLevels: 22}
    );
    
    //Creo layer di OSM
    var osm = new OpenLayers.Layer.OSM();     

    map.addLayers([gphy, gmap, ghyb, gsat]);
    
    map.addLayer(osm);
    
    map.setCenter(new OpenLayers.LonLat(7.770358,45.139551).transform(
            new OpenLayers.Projection("EPSG:4326"),
            map.getProjectionObject()
        ), 5);
    
	// create a WMS layer and add it to the map
    createWMSLayer(listLayer);
    

    
    // create legend	
    for(var key in listLayer) {
    	getLegendLayer(listLayer[key]);
    }
    
    infoControls = {
        click: new OpenLayers.Control.WMSGetFeatureInfo({
            url: serverURI, 
            title: 'Controlli Info',
            layers: [basicLayer],
            infoFormat: 'text/xml',
            queryVisible: true
        })
    };
    
    infoIdControls = {
        click: new OpenLayers.Control.WMSGetFeatureInfo({
            url: serverURI, 
            title: 'Controlli Info id',
            layers: [basicLayer],
            infoFormat: 'text/xml',
            queryVisible: true,
            vendorParams: {QUERY_LAYERS: activeLayer,STYLES: ""}
        })
    };
    
    modControls = new OpenLayers.Control.ModifyFeature(editableLayer, {
		onModificationEnd: function(feature){
			//execModificaFeatureTest(thematicLayer, editableLayer, feature, getSelectedLayer());
			execModificaFeature(basicLayer, feature, activeLayer);
		}
	});
    
    // Add layer in elenco
    map.addLayer(basicLayer);
    // Add layer for map info
    map.addLayer(highlightLayer);
    // Add layer for edit
    map.addLayer(editableLayer);
    
    // Add click event to info Control
    infoControls.click.events.register("getfeatureinfo", this, showInfo);
    infoIdControls.click.events.register("getfeatureinfo", this, getIdFeatureSelected);
    
    // Link controls to map
    map.addControl(infoControls.click); 
    map.addControl(new OpenLayers.Control.LayerSwitcher());
    map.addControl(modControls);
    map.addControl(infoIdControls.click);
    
    // Associazione controlli di misura alla mappa
    for(var key in measureControls) {
        measureControls[key].events.on({
            "measure": handleMeasurements,
            "measurepartial": handleMeasurements
        });
        map.addControl(measureControls[key]);
    }
    
    // Set map to max extent
	map.zoomToMaxExtent();
}

function createWMSLayer(listLayer) {
	
	var listLayerToView = getStringLayerToShow(listLayer);
	
	// Create Base WMS with all layers to show
	basicLayer = new OpenLayers.Layer.WMS( "Progetto",
				serverURI,
				{
					layers: listLayerToView.reverse(),
					transparent: 'true',
					format:"image/png"
				},
				{
					buffer: 4,
					isBaseLayer: false,
					//transitionEffect: null,
					redraw: function(force) {
						if(force)
							return this.mergeNewParams({"_olSalt": Math.random()});
						else
							return OpenLayers.Layer.prototype.redraw.apply(this, []);        			
		        		} 
		        }
	);
	
	highlightLayer = new OpenLayers.Layer.Vector("attribHighLight",{isBaseLayer: false, displayInLayerSwitcher: true, styleMap: styleMapHighLightLayer});
	
	editableLayer = new OpenLayers.Layer.Vector("EditLayer",{isBaseLayer: false, displayInLayerSwitcher: true, styleMap: styleMapHighLightLayer});
	
}

function getStringLayerToShow(listLayer) {
	var listLayerToView = new Array();
	
	for(var key in listLayer) {
		listLayerToView.push(listLayer[key]);
	}
	return listLayerToView;
}

// Event click on map to get info elements
function showInfo(evt) {
   if($('#wg-layerInfoContainer').is(':hidden'))
	   $('#wg-layerInfoContainer').toggle('slide', {direction: 'right'}, 400);
   $('#wg-layerInfo').children().remove();
   $('#wg-layerInfo').accordion('destroy');
   createListInfoAccordion(evt);	
}

// Event click on map for get distance
function handleMeasurements(event) {
    var geometry = event.geometry;
    var units = event.units;
    var order = event.order;
    var measure = event.measure;
    var out = "";
    if(order == 1) {
        out += measure.toFixed(3) + " " + units;
    } else {
        out += measure.toFixed(3) + " " + units + "<sup>2</" + "sup>";
    }
    $('#outputDistanceText').html(out);
}

function createListInfoAccordion(data) {
	
	// Create accordion with info elements
	$(data.text).find('Layer').each(function(){
		var layersInfoContainer = $("<div>").attr("id", 'layersInfoContainer_'+this.attributes[0].textContent);
	    $('#wg-layerInfo').append(
			$("<div>").attr('id', 'container_'+this.attributes[0].textContent).attr("class", "infoLayerContainer").append(
				$("<h3>").append(
					$("<a>").attr("href", "#").html(this.attributes[0].textContent)
				),
				layersInfoContainer
			)
		);

		for(var i=0; i<this.children.length; i++) {
			for(var j=0; j<$(this.children[i]).find('ATTRIBUTE').length - 1; j++) {
				layersInfoContainer.append(
					$("<div>").attr('class', 'divAttributes')
						.html($($(this.children[i]).find('ATTRIBUTE')[j].outerHTML).attr('name') + ': ' 
							 +$($(this.children[i]).find('ATTRIBUTE')[j].outerHTML).attr('value'))
				);
			}
		}
	});
	
	$('#wg-layerInfo').accordion(propertyAccordion);
}

// Set active layer
function setActiveLayer(obj){
	activeCurrentLayer = obj;
	return activeCurrentLayer;
}

// Get id of selected element
function getIdFeatureSelected(data){
	$(data.text).find('Feature').each(function(){
		getEditWfsLayer(activeLayer, $(this).attr('id'));
	});
}

// Create info control for active layer
function createInfoFilterControl(activeCurrentLayer) {
    infoIdControls = {
        click: new OpenLayers.Control.WMSGetFeatureInfo({
            url: serverURI, 
            title: 'Controlli Info id',
            layers: [basicLayer],
            infoFormat: 'text/xml',
            queryVisible: true,
            vendorParams: {QUERY_LAYERS: activeCurrentLayer,STYLES: ""}
        })
    };
    infoIdControls.click.events.register("getfeatureinfo", this, getIdFeatureSelected);
    map.addControl(infoIdControls.click);
}

function getEditWfsLayer (layer, idFeature) {
	
	var gmlOptions = {
		    featureType: "point",
		    featureNS: serverURI
		};
	var gmlOptionsIn = OpenLayers.Util.extend(
	    OpenLayers.Util.extend({}, gmlOptions)
	);
    
    $.ajax({
		type: 'GET',
		url: serverURI,
		dataType: 'text',
		data: {
	         'SERVICE': 'WFS',
	         'VERSION': '1.1.1',
	         'TYPENAME': layer,
	         'REQUEST': 'GetFeature',
	         'MAXFEATURES': '5000',
	         'OUTPUTFORMAT': 'GML3',
	         'SRS': 'EPSG:' + epsgcode,
	         'FEATUREID': idFeature
		},
		success:	function(response) {
	       	var format = new OpenLayers.Format.GML(gmlOptions);
        	var features = format.read(response);
            if(features){
                for(var i=0; i<features.length; i++){
                    editableLayer.addFeatures(features[i]);
                }
            }
		}
	});

}